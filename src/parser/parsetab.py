
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BEGIN END EQ GOTOB GOTOF IF MACRO MACROID MINUS NEQ NUMBER PLUS POINTVIRGULE POP PUSH R RID RPAREN THEN VIRGULEprogram : codecode : expression codecode : expressionexpression : PUSH R NUMBERexpression : POP R NUMBERexpression : R NUMBER EQ R NUMBER PLUS NUMBER\n                    | R NUMBER EQ R NUMBER MINUS NUMBERexpression : IF R NUMBER NEQ NUMBER THEN GOTOB NUMBER\n                    | IF R NUMBER NEQ NUMBER THEN GOTOF NUMBERexpression : macroDeclarationexpression : callmacrocallmacro : MACROID listRegister RPARENmacroDeclaration : BEGIN MACRO MACROID macroListRegister RPAREN macroCode END MACRO POINTVIRGULElistRegister : R NUMBER VIRGULE listRegister\n                            | R NUMBER\n                            | macroListRegister : RID VIRGULE macroListRegister\n                            | RID\n                            | macroCode : macroExpression macroCodemacroCode : macroExpressionmacroExpression : PUSH macroidmacroExpression : POP macroidmacroExpression : macroid EQ macroid PLUS NUMBER\n                    | macroid EQ macroid MINUS NUMBERmacroExpression : IF macroid NEQ NUMBER THEN GOTOB NUMBER\n                    | IF macroid NEQ NUMBER THEN GOTOF NUMBERmacroExpression : MACROID listMacroid RPARENmacroid : RID\n               | R NUMBERlistMacroid : macroid VIRGULE listMacroid\n                            | macroid\n                            | '
    
_lr_action_items = {'PUSH':([0,3,8,9,20,22,25,34,42,47,50,51,58,60,62,63,64,65,71,75,76,80,81,],[4,4,-10,-11,-4,-5,-12,43,43,-29,-6,-7,-22,-23,-30,-8,-9,-28,-13,-24,-25,-26,-27,]),'POP':([0,3,8,9,20,22,25,34,42,47,50,51,58,60,62,63,64,65,71,75,76,80,81,],[6,6,-10,-11,-4,-5,-12,45,45,-29,-6,-7,-22,-23,-30,-8,-9,-28,-13,-24,-25,-26,-27,]),'R':([0,3,4,6,7,8,9,11,20,21,22,25,31,34,40,42,43,45,46,47,50,51,58,59,60,62,63,64,65,66,71,75,76,80,81,],[5,5,13,15,16,-10,-11,19,-4,27,-5,-12,19,48,48,48,48,48,48,-29,-6,-7,-22,48,-23,-30,-8,-9,-28,48,-13,-24,-25,-26,-27,]),'IF':([0,3,8,9,20,22,25,34,42,47,50,51,58,60,62,63,64,65,71,75,76,80,81,],[7,7,-10,-11,-4,-5,-12,46,46,-29,-6,-7,-22,-23,-30,-8,-9,-28,-13,-24,-25,-26,-27,]),'BEGIN':([0,3,8,9,20,22,25,50,51,63,64,71,],[10,10,-10,-11,-4,-5,-12,-6,-7,-8,-9,-13,]),'MACROID':([0,3,8,9,17,20,22,25,34,42,47,50,51,58,60,62,63,64,65,71,75,76,80,81,],[11,11,-10,-11,24,-4,-5,-12,40,40,-29,-6,-7,-22,-23,-30,-8,-9,-28,-13,-24,-25,-26,-27,]),'$end':([1,2,3,8,9,12,20,22,25,50,51,63,64,71,],[0,-1,-3,-10,-11,-2,-4,-5,-12,-6,-7,-8,-9,-13,]),'NUMBER':([5,13,15,16,19,27,28,37,38,48,52,53,69,72,73,78,79,],[14,20,22,23,26,32,33,50,51,62,63,64,74,75,76,80,81,]),'MACRO':([10,56,],[17,67,]),'RPAREN':([11,18,24,26,29,30,31,35,36,40,47,49,54,55,62,66,70,],[-16,25,-19,-15,34,-18,-16,-19,-14,-33,-29,-17,65,-32,-30,-33,-31,]),'EQ':([14,44,47,62,],[21,59,-29,-30,]),'NEQ':([23,47,61,62,],[28,-29,69,-30,]),'RID':([24,34,35,40,42,43,45,46,47,58,59,60,62,65,66,75,76,80,81,],[30,47,30,47,47,47,47,47,-29,-22,47,-23,-30,-28,47,-24,-25,-26,-27,]),'VIRGULE':([26,30,47,55,62,],[31,35,-29,66,-30,]),'PLUS':([32,47,62,68,],[37,-29,-30,72,]),'MINUS':([32,47,62,68,],[38,-29,-30,73,]),'THEN':([33,74,],[39,77,]),'GOTOB':([39,77,],[52,78,]),'GOTOF':([39,77,],[53,79,]),'END':([41,42,47,57,58,60,62,65,75,76,80,81,],[56,-21,-29,-20,-22,-23,-30,-28,-24,-25,-26,-27,]),'POINTVIRGULE':([67,],[71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'code':([0,3,],[2,12,]),'expression':([0,3,],[3,3,]),'macroDeclaration':([0,3,],[8,8,]),'callmacro':([0,3,],[9,9,]),'listRegister':([11,31,],[18,36,]),'macroListRegister':([24,35,],[29,49,]),'macroCode':([34,42,],[41,57,]),'macroExpression':([34,42,],[42,42,]),'macroid':([34,40,42,43,45,46,59,66,],[44,55,44,58,60,61,68,55,]),'listMacroid':([40,66,],[54,70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> code','program',1,'p_program','lexer.py',109),
  ('code -> expression code','code',2,'p_code_list','lexer.py',123),
  ('code -> expression','code',1,'p_code_simple','lexer.py',129),
  ('expression -> PUSH R NUMBER','expression',3,'p_expression_push','lexer.py',137),
  ('expression -> POP R NUMBER','expression',3,'p_expression_pop','lexer.py',143),
  ('expression -> R NUMBER EQ R NUMBER PLUS NUMBER','expression',7,'p_expression_12','lexer.py',149),
  ('expression -> R NUMBER EQ R NUMBER MINUS NUMBER','expression',7,'p_expression_12','lexer.py',150),
  ('expression -> IF R NUMBER NEQ NUMBER THEN GOTOB NUMBER','expression',8,'p_expression_34','lexer.py',177),
  ('expression -> IF R NUMBER NEQ NUMBER THEN GOTOF NUMBER','expression',8,'p_expression_34','lexer.py',178),
  ('expression -> macroDeclaration','expression',1,'p_expression_5','lexer.py',200),
  ('expression -> callmacro','expression',1,'p_expression_callmacro','lexer.py',206),
  ('callmacro -> MACROID listRegister RPAREN','callmacro',3,'p_callmacro','lexer.py',212),
  ('macroDeclaration -> BEGIN MACRO MACROID macroListRegister RPAREN macroCode END MACRO POINTVIRGULE','macroDeclaration',9,'p_macroDeclaration','lexer.py',227),
  ('listRegister -> R NUMBER VIRGULE listRegister','listRegister',4,'p_listRegister','lexer.py',244),
  ('listRegister -> R NUMBER','listRegister',2,'p_listRegister','lexer.py',245),
  ('listRegister -> <empty>','listRegister',0,'p_listRegister','lexer.py',246),
  ('macroListRegister -> RID VIRGULE macroListRegister','macroListRegister',3,'p_macroListRegister','lexer.py',262),
  ('macroListRegister -> RID','macroListRegister',1,'p_macroListRegister','lexer.py',263),
  ('macroListRegister -> <empty>','macroListRegister',0,'p_macroListRegister','lexer.py',264),
  ('macroCode -> macroExpression macroCode','macroCode',2,'p_macroCode_list','lexer.py',274),
  ('macroCode -> macroExpression','macroCode',1,'p_macroCode_simple','lexer.py',280),
  ('macroExpression -> PUSH macroid','macroExpression',2,'p_macroExpression_push','lexer.py',288),
  ('macroExpression -> POP macroid','macroExpression',2,'p_macroExpression_pop','lexer.py',294),
  ('macroExpression -> macroid EQ macroid PLUS NUMBER','macroExpression',5,'p_macroExpression_12','lexer.py',300),
  ('macroExpression -> macroid EQ macroid MINUS NUMBER','macroExpression',5,'p_macroExpression_12','lexer.py',301),
  ('macroExpression -> IF macroid NEQ NUMBER THEN GOTOB NUMBER','macroExpression',7,'p_macroExpression_34','lexer.py',328),
  ('macroExpression -> IF macroid NEQ NUMBER THEN GOTOF NUMBER','macroExpression',7,'p_macroExpression_34','lexer.py',329),
  ('macroExpression -> MACROID listMacroid RPAREN','macroExpression',3,'p_macroExpression_callmacro','lexer.py',351),
  ('macroid -> RID','macroid',1,'p_macroid','lexer.py',362),
  ('macroid -> R NUMBER','macroid',2,'p_macroid','lexer.py',363),
  ('listMacroid -> macroid VIRGULE listMacroid','listMacroid',3,'p_listMacroid','lexer.py',373),
  ('listMacroid -> macroid','listMacroid',1,'p_listMacroid','lexer.py',374),
  ('listMacroid -> <empty>','listMacroid',0,'p_listMacroid','lexer.py',375),
]
